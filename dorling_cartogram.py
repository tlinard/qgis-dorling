# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DorlingCartogram
                                 A QGIS plugin
 Plugin for creating Dorling cartograms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tanguy Linard
        email                : tanguy.linard@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dorling_cartogram_dialog import DorlingCartogramDialog
import os.path

from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsField, QgsFields, QgsGeometry, QgsPointXY, QgsWkbTypes

from .preprocessing import *
from .dorling_core import *
from .layer_builder import *

import time


class DorlingCartogram:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DorlingCartogram_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Dorling Cartogram')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DorlingCartogram', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = os.path.join(os.path.dirname(__file__), 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'Compute Dorling cartogram'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def get_selected_layer_and_field(self):
        layer_index = self.dlg.comboBoxLayer.currentIndex()
        field_name = self.dlg.comboBoxField.currentText()

        if layer_index < 0 or layer_index >= len(self.layer_list):
            return None, None

        selected_layer = self.layer_list[layer_index]
        return selected_layer, field_name
    
    def populate_layers(self):
        nodes = QgsProject.instance().layerTreeRoot().children()

        self.layer_list = []
        for node in nodes:
            if hasattr(node, 'layer'):
                layer = node.layer()
                if layer and layer.type() == layer.VectorLayer:
                    geom_type = QgsWkbTypes.geometryType(layer.wkbType())
                    if geom_type == QgsWkbTypes.PolygonGeometry:
                        self.layer_list.append(layer)

        self.dlg.comboBoxLayer.clear()
        self.dlg.comboBoxLayer.addItems([layer.name() for layer in self.layer_list])

    def populate_fields(self):
        layer_index = self.dlg.comboBoxLayer.currentIndex()

        if layer_index < 0 or layer_index >= len(self.layer_list):
            return

        selected_layer = self.layer_list[layer_index]

        numeric_field_names = []
        for field in selected_layer.fields():
            if field.type() in (QVariant.Int, QVariant.Double, QVariant.LongLong):
                numeric_field_names.append(field.name())

        self.dlg.comboBoxField.clear()
        self.dlg.comboBoxField.addItems(numeric_field_names)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Dorling Cartogram'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DorlingCartogramDialog()
            self.dlg.comboBoxLayer.currentIndexChanged.connect(self.populate_fields)

        self.populate_layers()
        self.populate_fields()

        # Set default values for friction and ratio
        self.dlg.doubleSpinBoxFriction.setValue(0.25)
        self.dlg.doubleSpinBoxRatio.setValue(0.4)
        self.dlg.mQgsSpinBoxIterations.setValue(200)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            start_time = time.time()

            selected_layer, selected_field = self.get_selected_layer_and_field()

            friction = self.dlg.doubleSpinBoxFriction.value()
            ratio = self.dlg.doubleSpinBoxRatio.value()
            iterations = self.dlg.mQgsSpinBoxIterations.value()
            
            if selected_layer and selected_field:
                print(f"Layer: {selected_layer.name()}, Field: {selected_field}", f"Friction: {friction}, Ratio: {ratio}")

                # check if the selected layer uses a projected CRS
                if selected_layer.crs().isGeographic():
                    QMessageBox.warning(
                        self.dlg,
                        "Invalid CRS",
                        "The selected layer uses a geographic CRS (in degrees). Please reproject it to a projected CRS (e.g., EPSG:3857) before proceeding."
                    )
                    return
                
                # Prepocessing
                centroid_dict, neighbours_dict = preprocessing(selected_layer, selected_field)

                # Compute Dorling
                compute_dorling(centroid_dict, neighbours_dict, friction, ratio, iterations)

                # Build layer
                dorling_layer = create_point_layer(selected_layer, centroid_dict)
                style_layer(dorling_layer)
                QgsProject.instance().addMapLayer(dorling_layer)

                end_time = time.time()
                print(f"[DorlingCartogram] Total completed in {end_time - start_time:.2f} seconds")